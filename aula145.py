# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod
from os import system
system('cls')

# Classe abstrata notifica√ß√£o
class Notificacao(ABC):
    def __init__(self, mensagem):
        self.mensagem = mensagem

    @abstractmethod
    def enviar(self) -> bool: ...


# Classes que herdam da >>Classe Abstrata<< Notifica√ß√£o
class NotificacaoEmail(Notificacao):
    tipo = "E-Mail"
    def enviar(self) -> bool:
        print(f'Enviando E-Mail: "{self.mensagem}"')
        return True


class NotificacaoSMS(Notificacao):
    tipo = "SMS"
    def enviar(self) -> bool:
        print(f'Enviando SMS: "{self.mensagem}"')
        return True


# Fun√ß√£o notificar que utiliza das classes de notifica√ß√£o (magia negra)
def notificar(notificacao: Notificacao):
    notificaco_enviada = notificacao.enviar()

    if notificaco_enviada:
        print(f"Notifica√ß√£o via {notificacao.tipo} enviada com sucsso!\n")
    else:
        print(f"Algo deu errado. Notifica√ß√£o via {notificacao.tipo} N√ÉO enviada!\n")


# Notifica√ß√£o de E-Mail
notificar(NotificacaoEmail("Lorem Ipsum Dolor Sit Amet."))

# Notifica√ß√£o de SMS
notificacao_sms = NotificacaoSMS("Lorem Ipsum Dolor Sit Amet.")
notificar(notificacao_sms)
